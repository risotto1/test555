apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ include "concourse.worker.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "concourse.name" . }}
    helm.sh/chart: {{ include "concourse.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: {{ include "concourse.worker.fullname" . }}
  replicas: {{ .Values.concourse.worker.replicas }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "concourse.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "concourse.worker.fullname" . }}
      volumes:
        - name: keys
          secret:
            secretName: {{ include "concourse.concourse.fullname" .}}
            defaultMode: 0400
            items:
              - key: host-key
                path: host_key
              - key: session-signing-key
                path: session_signing_key
              - key: worker-key-pub
                path: worker_key_pub
      containers:
        - name: {{ include "concourse.worker.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
          args:
            - -c
            - |-
              cp /dev/null /tmp/.liveness_probe
              rm -rf ${CONCOURSE_WORK_DIR:-/concourse-work-dir}/*
              while ! concourse retire-worker --name=${HOSTNAME} | grep -q worker-not-found; do
                touch /tmp/.pre_start_cleanup
                sleep 5
              done
              rm -f /tmp/.pre_start_cleanup
              concourse worker --name=${HOSTNAME} | tee -a /tmp/.liveness_probe
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |-
                  FATAL_ERRORS=$( echo "${LIVENESS_PROBE_FATAL_ERRORS}" | grep -q '\S' && \
                      grep -F "${LIVENESS_PROBE_FATAL_ERRORS}" /tmp/.liveness_probe )
                  cp /dev/null /tmp/.liveness_probe
                  if [ ! -z "${FATAL_ERRORS}" ]; then
                    >&2 echo "Fatal error detected: ${FATAL_ERRORS}"
                    exit 1
                  fi
                  if [ -f /tmp/.pre_start_cleanup ]; then
                    >&2 echo "Still trying to clean up before starting concourse. 'fly prune-worker -w ${HOSTNAME}' might need to be called to force cleanup."
                    exit 1
                  fi
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |-
                    while ! concourse retire-worker --name=${HOSTNAME} | grep -q worker-not-found; do
                      sleep 5
                    done
          volumes:
            - name: keys
              mountPath: /keys
              readOnly: true
          env:
            - name: CONCOURSE_WORK_DIR
              value: {{ .Values.concourse.worker.workDir }}
            - name: CONCOURSE_TSA_HOST
              value: {{ include "concourse.web.fullname" . }}:{{ .Values.concourse.web.tsa.port}}
            - name: CONCOURSE_TSA_PUBLIC_KEY
              value: /keys/host_key.pub
            - name: CONCOURSE_TSA_WORKER_PRIVATE_KEY
              value: /keys/worker_key
            - name: CONCOURSE_BAGGAGECLAIM_DRIVER
              value: "btfrs"
            - name: CONCOURSE_GARDEN_BIND_PORT
              value: "7777"
            - name: LIVENESS_PROBE_FATAL_ERRORS
              value: |-
                guardian.api.garden-server.create.failed
                baggageclaim.api.volume-server.create-volume-async.failed-to-create
          ports:
            - name: atc
              containerPort: {{ .Values.concourse.web.port }}
              protocol: TCP
            - name: tsa
              containerPort: {{ .Values.concourse.web.tsa.port}}
              protocol: TCP
          resources:
{{ toYaml .Values.concourse.web.resources | indent 12 }}
    {{- with .Values.concourse.web.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.concourse.web.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.concourse.web.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
